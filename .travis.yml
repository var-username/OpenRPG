language: cpp

compiler:
  - gcc
  # - clang

os:
  - linux
  - osx
  - windows

dist: bionic
osx_image: xcode11.3

addons:
  apt:
    sources:
    # - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
      # key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    - sourceline: 'ppa:ubuntu-toolchain-r/test'
    packages:
    # - clang-9
    - cmake
    - gcc-8
    - g++-8
  homebrew:
    packages:
    - cmake
    - gcc@8
    # - llvm@9
    update: true


notifications:
  email: false

before_deploy:
  - export ORPG_VERSION="0.5.2"
  - export ELECTRON_VERSION="6.1.7"
  - export TRAVIS_TAG="v${ORPG_VERSION}"
  - export NODE_VERSION="$(node -v | tr -d v)"

# TODO find ways to shrink this
jobs:
  include:
    # Core build and publish
    - os: linux
      stage: Core Publish
      script:
        - npm run clean
        - ./build.sh release package
      deploy:
        provider: releases
        token: $GH_TOKEN
        file:
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.deb"
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.deb.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.sh"
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.sh.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.tar.gz"
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.tar.gz.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.tar.xz"
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.tar.xz.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.tar.Z"
          - "dist/OpenRPG-${ORPG_VERSION}-Linux.tar.Z.sha512"
        overwrite: true
        skip_cleanup: true
        draft: true
        prerelease: true
    - os: osx
      stage: Core Publish
      script:
        - npm run clean
        - ./build.sh release package
      deploy:
        provider: releases
        token: $GH_TOKEN
        file:
          - "dist/OpenRPG-${ORPG_VERSION}-Darwin.sh"
          - "dist/OpenRPG-${ORPG_VERSION}-Darwin.sh.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-Darwin.tar.gz"
          - "dist/OpenRPG-${ORPG_VERSION}-Darwin.tar.gz.sha512"
        overwrite: true
        skip_cleanup: true
        draft: true
        prerelease: true
    - os: windows
      stage: Core Publish
      script:
        - npm run clean
        - ./build.bat release package
      deploy:
        provider: releases
        token: $GH_TOKEN
        file:
          - "dist/OpenRPG-${ORPG_VERSION}-win64.exe"
          - "dist/OpenRPG-${ORPG_VERSION}-win64.exe.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-win64.tar.gz"
          - "dist/OpenRPG-${ORPG_VERSION}-win64.tar.gz.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-win64.zip"
          - "dist/OpenRPG-${ORPG_VERSION}-win64.zip.sha512"
        overwrite: true
        skip_cleanup: true
        draft: true
        prerelease: true

    # Node build and publish
    - os: linux
      stage: Node Publish
      script:
        - npm run dist
      deploy:
        provider: releases
        token: $GH_TOKEN
        file:
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.deb"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.deb.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.sh"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.sh.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.tar.gz"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.tar.gz.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.tar.xz"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.tar.xz.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.tar.Z"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Linux.tar.Z.sha512"
        overwrite: true
        skip_cleanup: true
        draft: true
        prerelease: true
    - os: osx
      stage: Node Publish
      script:
        - npm run dist
      deploy:
        provider: releases
        token: $GH_TOKEN
        file:
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Darwin.sh"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Darwin.sh.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Darwin.tar.gz"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-Darwin.tar.gz.sha512"
        overwrite: true
        skip_cleanup: true
        draft: true
        prerelease: true
    - os: windows
      stage: Node Publish
      script: 
        - npm run dist
      deploy:
        provider: releases
        token: $GH_TOKEN
        file:
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-win64.exe"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-win64.exe.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-win64.tar.gz"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-win64.tar.gz.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-win64.zip"
          - "dist/OpenRPG-${ORPG_VERSION}-node-${NODE_VERSION}-win64.zip.sha512"
        overwrite: true
        skip_cleanup: true
        draft: true
        prerelease: true
    
    # Electron build and publish
    - os: linux
      stage: Electron Publish
      script:
        - npm run clean
        - npm run dist:electron
      deploy:
        provider: releases
        token: $GH_TOKEN
        file:
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.deb"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.deb.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.sh"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.sh.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.tar.gz"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.tar.gz.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.tar.xz"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.tar.xz.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.tar.Z"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Linux.tar.Z.sha512"
        overwrite: true
        skip_cleanup: true
        draft: true
        prerelease: true
    - os: osx
      stage: Electron Publish
      script:
        - npm run clean
        - npm run dist:electron
      deploy:
        provider: releases
        token: $GH_TOKEN
        file:
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Darwin.sh"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Darwin.sh.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Darwin.tar.gz"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-Darwin.tar.gz.sha512"
        overwrite: true
        skip_cleanup: true
        draft: true
        prerelease: true
    - os: windows
      stage: Electron Publish
      script:
        - npm run clean
        - npm run dist:electron
      deploy:
        provider: releases
        token: $GH_TOKEN
        file:
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-win64.exe"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-win64.exe.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-win64.tar.gz"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-win64.tar.gz.sha512"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-win64.zip"
          - "dist/OpenRPG-${ORPG_VERSION}-electron-${ELECTRON_VERSION}-win64.zip.sha512"
        overwrite: true
        skip_cleanup: true
        draft: true
        prerelease: true

before_install:
  # The following Homebrew packages aren't linked by default, and need to be
  # prepended to the path explicitly.
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      export PATH="$(brew --prefix llvm)/bin:$PATH";
    fi
  # /usr/bin/gcc points to an older compiler on both Linux and macOS.
  - if [ "$TRAVIS_OS_NAME" = "linux" ] || [ "$TRAVIS_OS_NAME" = "osx" ]; then
      if [ "$CXX" = "g++" ]; then
        export CXX="g++-8" CC="gcc-8";
      fi
    fi
  # /usr/bin/clang points to an older compiler on both Linux and macOS.
  #
  # Homebrew's llvm package doesn't ship a versioned clang++ binary, so the values
  # below don't work on macOS. Fortunately, the path change above makes the
  # default values (clang and clang++) resolve to the correct compiler on macOS.
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      if [ "$CXX" = "clang++" ]; then
        export CXX="clang++-9" CC="clang-9";
      fi;
    fi
  - echo ${CC}
  - echo ${CXX}
  - ${CXX} --version
  - cmake --version
  # Linux builds don't have node installed by default
  - if [[ "$TRAVIS_OS_NAME" = "linux" ]];
      then curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash;
      nvm install node; 
    fi
  # Windows builds don't have node or NSIS installed by default
  - if [[ "$TRAVIS_OS_NAME" = "windows" ]]; then
      choco install nodejs nsis;
      PATH="/c/Program Files/nodejs:$PATH";
      PATH="/c/Program Files (x86)/NSIS:$PATH";
      PATH="/c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin:$PATH";
      PATH="/c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64:$PATH";
    fi

install:
  - npm install && npm run clean && npm run compile

script:
  - npm test